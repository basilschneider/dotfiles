#!/usr/bin/env bash

# Make backup from local home directory to remote server
# Run as often as possible, to backup your data
# This script assumes that authentication with fkinit works
# See also ~/pkg/bin/bkpbkp, which makes a backup of this backup

# Figure out if you are in local network or not. This is needed since router
# does not support NAT Hairpinning
echo -n "Figure out if you are local or external with respect to backup server... "
if ssh archserver_local bash -c true &>/dev/null; then
    echo "Local."
    server=archserver_local
else
    echo "External."
    server=archserver_external
fi

errorFile=~/bkp_error.txt
bkp=/home/basil/bkp

## Get history files from other servers
#fkinit fnal
#rsync -pavz fnal:.history history_fnal
##fkinit desy
##rsync -pavz desy12:.history history_desy
#fkinit cern
#rsync -pavz lxplus:.history history_cern

# Backup home folder
rsync \
    -pavzz \
    --delete \
    --exclude 'mnt/' \
    --exclude '.cache/' \
    --exclude 'Videos/' \
    --exclude 'Music/' \
    --exclude 'Documents/vmware' \
    --exclude '.dropbox/command_socket' \
    --exclude '.dropbox/iface_socket' \
    --exclude '.moc/socket2' \
    --exclude '.config/Microsoft/Microsoft Teams' \
    /home/basil "${server}":"${bkp}" 2>> "$errorFile"
ssh "${server}" "echo Last backup invoked at $(date) >> ${bkp}/bkp.txt"

# Check size of backup
echo -n "Back up size on server: "
ssh \
    -q \
    "${server}" \
    du -sh "${bkp}" | awk '{ print $1 }'

# Check if there were errors
if [[ -s "$errorFile" ]]; then
    echo "There were errors." 1>&2
else
    rm "$errorFile"
fi

#rm history_fnal history_cern

echo "Bye."
