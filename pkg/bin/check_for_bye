#!/usr/bin/env bash

# Check for a specific line (counted from the bottom) to be a specific word.
# If this is the case, the job is assumed to have run successfully.

# What line number (counted from the bottom) to search for the specific word(s)
line=3

# If this word is found, the job is assumed to be successful
word="Job succeeded"

# When verbose is true, report what jobs have failed
verbose=false

usage(){
    echo "Check for a specific line (counted from the bottom) in a log file "
    echo "to be a specific word. If this is the case, the job is assumed "
    echo "to have run successfully."
    echo
    echo "Usage: $(basename $0) [option] [logfiles]"
    echo "where [option] can be"
    echo "  -h               Show this help"
    echo "  -l               Line to search from the bottom in given log files"
    echo "                   (default: ${line})"
    echo "  -w               Word to be searched for"
    echo "                   (default: ${word})"
    echo "  -v               Be verbose"
    echo "and [logfiles] is a path to any number of log files."
}

run(){
    # Array with failed log files
    failed=()

    # Total log files
    total=0

    # Check
    for file; do
        tail=$(tail -n "${line}" "${file}" | head -n 1)
        if [ -z "${tail}" ] || ! [[ "${tail}" =~ "${word}" ]]; then
            failed+=("${file}")
        fi
        (( total++ ))
    done

    # Report
    if [ "${verbose}" == "true" ]; then
        for file in "${failed[@]}"; do
            echo "${file}"
        done
    fi
    echo "Failed or unfinished: ${#failed[@]} / ${total}"
}

parseOptions(){

    OPT=$(getopt \
        --options hl:w:v \
        --name "$0" \
        -- "$@"
    )

    if [ $? -ne 0 ]; then
        err=true
    fi

    eval set -- "${OPT}"

    while true; do
        case "${1}" in
            -h) usage; exit 0;;
            -l) line="${2}"; shift 2;;
            -w) word="${2}"; shift 2;;
            -v) verbose=true; shift;;
            --) shift; break;;
        esac
    done

    run "$@"
}

main(){
    parseOptions "$@"

    if [ "${err}" = true ]; then
        usage
        exit 1
    fi
}

main "$@"
