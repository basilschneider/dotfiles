#!/usr/bin/env bash

# Check for a specific line (counted from the bottom) to be a specific word.
# If this is the case, the job is assumed to have run successfully.

# What line number (counted from the bottom) to search for the specific word(s)
line=3

# If this word is found, the job is assumed to be successful
word="Job succeeded"

# Total number of expected log files
totalExp=-1

# When verbose is
# 0: report number of failed/unfinished jobs
# 1: report number of failed/unfinished jobs and name of successful jobs
# 2: report number of failed/unfinished jobs and name of failed/unfinished jobs
# 3: report number of failed/unfinished jobs and name of empty log files
# 4: report number of failed/unfinished jobs and name of all files
verbose=0

usage(){
    echo "Check for a specific line (counted from the bottom) in a log file "
    echo "to be a specific word. If this is the case, the job is assumed "
    echo "to have run successfully."
    echo
    echo "Usage: $(basename $0) [option] [logfiles]"
    echo "where [option] can be"
    echo "  -h               Show this help"
    echo "  -l               Line to search from the bottom in given log files"
    echo "                   (default: ${line})"
    echo "  -w               Word to be searched for"
    echo "                   (default: ${word})"
    echo "  -t n             Expect n log files (default: ${totalExp})"
    echo "  -v n             Change verbosity level (default: ${verbose})"
    echo "                   0: silent"
    echo "                   1: report successful jobs"
    echo "                   2: report failed jobs"
    echo "                   3: report empty log files"
    echo "                   4: report all jobs and their categories"
    echo "and [logfiles] is a path to any number of log files."
}

run(){
    # Array with empty/failed/successful log files
    empty=()
    failed=()
    successful=()

    # Total log files
    total=0

    # Check
    for file; do
        tail=$(tail -n "${line}" "${file}" | head -n 1)
        if [ -z "${tail}" ]; then
            empty+=("${file}")
        elif ! [[ "${tail}" =~ "${word}" ]]; then
            failed+=("${file}")
        else
            successful+=("${file}")
        fi
        (( total++ ))
    done

    # If total number of expected log files is not set, set it to total
    if [ "${totalExp}" -lt 0 ]; then
        totalExp="${total}"
    fi

    # Get number of missing log files
    missing=$(( ${totalExp} - ${total} ))

    # Report
    if [ "${verbose}" -eq 1 ]; then
        for file in "${successful[@]}"; do
            echo Finished: "${file}"
        done
    elif [ "${verbose}" -eq 2 ]; then
        for file in "${failed[@]}"; do
            echo Failed: "${file}"
        done
    elif [ "${verbose}" -eq 3 ]; then
        for file in "${empty[@]}"; do
            echo Empty: "${file}"
        done
    elif [ "${verbose}" -eq 4 ]; then
        for file in "${successful[@]}"; do
            echo Finished: "${file}"
        done
        for file in "${failed[@]}"; do
            echo Failed: "${file}"
        done
        for file in "${empty[@]}"; do
            echo Empty: "${file}"
        done
    fi
    printf "%-21s : %*s / %*s\n" "Finished successfully" "${#totalExp}" "${#successful[@]}" "${#totalExp}" "${totalExp}"
    printf "%-21s : %*s / %*s\n" "Failed" "${#totalExp}" "${#failed[@]}" "${#totalExp}" "${totalExp}"
    printf "%-21s : %*s / %*s\n" "Empty log files" "${#totalExp}" "${#empty[@]}" "${#totalExp}" "${totalExp}"
    printf "%-21s : %*s / %*s\n" "Missing log files" "${#totalExp}" "${missing}" "${#totalExp}" "${totalExp}"
}

parseOptions(){

    OPT=$(getopt \
        --options hl:w:t:v: \
        --name "$0" \
        -- "$@"
    )

    if [ $? -ne 0 ]; then
        err=true
    fi

    eval set -- "${OPT}"

    while true; do
        case "${1}" in
            -h) usage; exit 0;;
            -l) line="${2}"; shift 2;;
            -w) word="${2}"; shift 2;;
            -t) totalExp="${2}"; shift 2;;
            -v) verbose="${2}"; shift 2;;
            --) shift; break;;
        esac
    done

    if [ "${err}" = true ]; then
        usage
        exit 1
    fi

    run "$@"
}

parseOptions "$@"
